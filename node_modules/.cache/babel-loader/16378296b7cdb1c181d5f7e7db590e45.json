{"ast":null,"code":"var _jsxFileName = \"/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js\";\nimport React, { useState, useEffect } from 'react';\nimport spinnerGIF from '../../images/spinner.gif';\nimport styles from './TopTracks.module.css';\nimport Track from '../Track/Track';\nimport { fetchTop10, fetchSpecificTrack } from '../musicxmatchAPI';\nimport Search from '../Search/Search';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nfunction TopTracks(props) {\n  const [tracksList, setTracksList] = useState([]);\n  const [heading, setHeading] = useState(\"Top 10 Tracks in US\");\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchTop10());\n      setHeading(\"Top 10 Tracks in US\");\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchSpecificTrack(props.searchTerm));\n      setHeading(\"Search Results\");\n    };\n\n    const clearSearch = () => {\n      props.clearSearchTerm(true);\n    };\n\n    if (props.searchTerm !== '') {\n      fetchData();\n      clearSearch();\n    }\n\n    console.log(\"useEffect\", props.searchTerm);\n  }, [props.searchTerm]); //     const submitHandler = async (searchTerm, event) => {\n  //         event.preventDefault()\n  //         const data = await fetchSpecificTrack(searchTerm)\n  //         setTracksList(data)\n  //         setHeading(\"Search Results\")\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    align: \"center\",\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, heading), /*#__PURE__*/React.createElement(\"div\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(NativeSelect, {\n    defaultValue: \"us\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"us\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"US\")))), tracksList.length !== 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, tracksList.map(track => {\n    return /*#__PURE__*/React.createElement(Track, {\n      track: track.track,\n      key: track.track.track_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 40\n      }\n    });\n  })) : /*#__PURE__*/React.createElement(\"img\", {\n    src: spinnerGIF,\n    alt: \"loading....\",\n    className: styles.spinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }));\n}\n\nexport default TopTracks;","map":{"version":3,"sources":["/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js"],"names":["React","useState","useEffect","spinnerGIF","styles","Track","fetchTop10","fetchSpecificTrack","Search","NativeSelect","FormControl","TopTracks","props","tracksList","setTracksList","heading","setHeading","fetchData","searchTerm","clearSearch","clearSearchTerm","console","log","length","results","map","track","track_id","spinner"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport spinnerGIF from '../../images/spinner.gif'\nimport styles from './TopTracks.module.css'\nimport Track from '../Track/Track'\nimport {fetchTop10, fetchSpecificTrack} from '../musicxmatchAPI'\nimport Search from '../Search/Search'\nimport {NativeSelect, FormControl} from '@material-ui/core'\n\nfunction TopTracks(props) {\n    const [tracksList, setTracksList] = useState([])\n    const [heading, setHeading] = useState(\"Top 10 Tracks in US\")\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchTop10())\n            setHeading(\"Top 10 Tracks in US\")\n\n        }\n        fetchData()\n    }, [])\n\n\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchSpecificTrack(props.searchTerm))\n            setHeading(\"Search Results\")\n        }\n\n        const clearSearch = () => {\n            props.clearSearchTerm(true)\n        }\n\n        if(props.searchTerm !== ''){\n            fetchData()\n            clearSearch()\n        }\n        console.log(\"useEffect\", props.searchTerm) \n    }, [props.searchTerm])\n\n\n//     const submitHandler = async (searchTerm, event) => {\n//         event.preventDefault()\n//         const data = await fetchSpecificTrack(searchTerm)\n//         setTracksList(data)\n//         setHeading(\"Search Results\")\n//   }\n    return (\n        <div>\n            {/* <Search  submitHandler={submitHandler}/> */}\n            <h3 align='center' className={styles.heading}>{heading}</h3>\n            <div align='center'>\n                <FormControl >\n                    <NativeSelect  defaultValue = \"us\" >\n                        <option value=\"us\">US</option>\n                        {/* {countries.map((country, i) => (<option key={i} value={country}> {country} </option>))} */}\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            {\n                tracksList.length !== 0? (\n                    <div className={styles.results}>\n                        {\n                            tracksList.map((track) => {\n                                return <Track track={track.track} key={track.track.track_id}/>\n                            })  \n                        }\n\n                    </div>\n                )\n                :  (<img src={spinnerGIF} alt= 'loading....' className={styles.spinner}></img>)\n                \n            }\n        </div>\n    )\n}\n\nexport default TopTracks\n"]},"metadata":{},"sourceType":"module"}