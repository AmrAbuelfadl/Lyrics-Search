{"ast":null,"code":"var _jsxFileName = \"/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js\";\nimport React, { useState, useEffect } from 'react';\nimport spinnerGIF from '../../images/spinner.gif';\nimport styles from './TopTracks.module.css';\nimport Track from '../Track/Track';\nimport { fetchTop10, fetchSpecificTrack } from '../musicxmatchAPI';\nimport Search from '../Search/Search';\nimport { NativeSelect, FormControl, ButtonGroup } from '@material-ui/core';\n\nfunction TopTracks(props) {\n  const [tracksList, setTracksList] = useState([]);\n  const [heading, setHeading] = useState(\"\");\n  const [CountryCode, setCountryCode] = useState(\"EG\");\n  const [Country, setCountry] = useState(\"in Egypt\");\n  const [event, setEvent] = useState(null);\n  const countriesCode = [\"EG\", \"US\", \"FR\", \"MA\", \"ES\", \"AE\", \"GB\", \"TN\", \"SA\", \"IT\"];\n  const countries = [\"in Egypt\", \"in UnitedStates\", \"in France\", \"in Morroco\", \"in Spain\", \"in Emirates\", \"in Britain\", \"in Tunisia\", \"in Saudi Arabia\", \"in Italy\"];\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchTop10(CountryCode));\n      setHeading(`Top 10 Tracks ${CountryCode}`);\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchSpecificTrack(props.searchTerm));\n      setHeading(\"Search Results\");\n    };\n\n    const clearSearch = () => {\n      props.clearSearchTerm(true);\n    };\n\n    if (props.searchTerm !== '') {\n      fetchData();\n      clearSearch();\n    }\n\n    console.log(\"useEffect\", props.searchTerm);\n  }, [props.searchTerm]); //     const submitHandler = async (searchTerm, event) => {\n  //         event.preventDefault()\n  //         const data = await fetchSpecificTrack(searchTerm)\n  //         setTracksList(data)\n  //         setHeading(\"Search Results\")\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    align: \"center\",\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, heading), /*#__PURE__*/React.createElement(\"div\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Choose Country\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: async () => {\n      event.preventDefault();\n      await fetchTop10(CountryCode); // setHeading(`Top 10 Tracks ${Country}`)\n\n      console.log(\"New TOP 10\", tracksList);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    defaultValue: \"EG\",\n    onChange: event => {\n      setEvent(event);\n      setCountryCode(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, countriesCode.map((countryCode, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: countryCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 65\n    }\n  }, \" \", countries[i], \" \"))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, \"Submit\"))), tracksList.length !== 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, tracksList.map(track => {\n    return /*#__PURE__*/React.createElement(Track, {\n      track: track.track,\n      key: track.track.track_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 40\n      }\n    });\n  })) : /*#__PURE__*/React.createElement(\"img\", {\n    src: spinnerGIF,\n    alt: \"loading....\",\n    className: styles.spinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }));\n}\n\nexport default TopTracks;","map":{"version":3,"sources":["/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js"],"names":["React","useState","useEffect","spinnerGIF","styles","Track","fetchTop10","fetchSpecificTrack","Search","NativeSelect","FormControl","ButtonGroup","TopTracks","props","tracksList","setTracksList","heading","setHeading","CountryCode","setCountryCode","Country","setCountry","event","setEvent","countriesCode","countries","fetchData","searchTerm","clearSearch","clearSearchTerm","console","log","preventDefault","target","value","map","countryCode","i","length","results","track","track_id","spinner"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport spinnerGIF from '../../images/spinner.gif'\nimport styles from './TopTracks.module.css'\nimport Track from '../Track/Track'\nimport {fetchTop10, fetchSpecificTrack} from '../musicxmatchAPI'\nimport Search from '../Search/Search'\nimport {NativeSelect, FormControl, ButtonGroup} from '@material-ui/core'\n\nfunction TopTracks(props) {\n    const [tracksList, setTracksList] = useState([])\n    const [heading, setHeading] = useState(\"\")\n    const [CountryCode, setCountryCode] = useState(\"EG\")\n    const [Country, setCountry] = useState(\"in Egypt\")\n    const [event, setEvent] = useState(null)\n\n    const countriesCode = [\"EG\", \"US\", \"FR\", \"MA\", \"ES\", \"AE\", \"GB\", \"TN\", \"SA\", \"IT\"]\n    const countries = [\"in Egypt\", \"in UnitedStates\", \"in France\", \"in Morroco\", \"in Spain\", \"in Emirates\", \"in Britain\", \"in Tunisia\", \"in Saudi Arabia\", \"in Italy\"]\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchTop10(CountryCode))\n            setHeading(`Top 10 Tracks ${CountryCode}`)\n\n        }\n        fetchData()\n    }, [])\n\n\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchSpecificTrack(props.searchTerm))\n            setHeading(\"Search Results\")\n        }\n\n        const clearSearch = () => {\n            props.clearSearchTerm(true)\n        }\n\n        if(props.searchTerm !== ''){\n            fetchData()\n            clearSearch()\n        }\n        console.log(\"useEffect\", props.searchTerm) \n    }, [props.searchTerm])\n\n\n//     const submitHandler = async (searchTerm, event) => {\n//         event.preventDefault()\n//         const data = await fetchSpecificTrack(searchTerm)\n//         setTracksList(data)\n//         setHeading(\"Search Results\")\n//   }\n    return (\n        <div>\n            {/* <Search  submitHandler={submitHandler}/> */}\n            <h3 align='center' className={styles.heading}>{heading}</h3>\n            <div align='center'> \n                <h4>Choose Country</h4>\n                <form onSubmit={ async ()=> {\n                    event.preventDefault()\n                    await fetchTop10(CountryCode)\n                    // setHeading(`Top 10 Tracks ${Country}`)\n                    console.log(\"New TOP 10\", tracksList)\n                }}>\n                    <select  defaultValue = \"EG\" onChange={(event)=>{\n                        setEvent(event)\n                        setCountryCode(event.target.value)\n                        }}>\n                        {countriesCode.map((countryCode, i) => (<option key={i} value={countryCode} > {countries[i]} </option>))}\n                    </select>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            {\n                tracksList.length !== 0? (\n                    <div className={styles.results}>\n                        \n                        {\n                            tracksList.map((track) => {\n                                return <Track track={track.track} key={track.track.track_id}/>\n                            })  \n                        }\n\n                    </div>\n                )\n                :  (<img src={spinnerGIF} alt= 'loading....' className={styles.spinner}></img>)\n                \n            }\n        </div>\n    )\n}\n\nexport default TopTracks\n"]},"metadata":{},"sourceType":"module"}