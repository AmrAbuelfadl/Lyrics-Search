{"ast":null,"code":"var _jsxFileName = \"/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js\";\nimport React, { useState, useEffect } from 'react';\nimport spinnerGIF from '../../images/spinner.gif';\nimport styles from './TopTracks.module.css';\nimport Track from '../Track/Track';\nimport { fetchTop10, fetchSpecificTrack } from '../musicxmatchAPI';\nimport Search from '../Search/Search';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nfunction TopTracks(props) {\n  const [tracksList, setTracksList] = useState([]);\n  const [heading, setHeading] = useState(\"\");\n  const [CountryCode, setCountryCode] = useState(\"eg\");\n  const [Country, setCountry] = useState(\"Globally\");\n  const countriesCode = [\"XW\", \"EG\", \"US\", \"FR\", \"MA\", \"ES\", \"AE\", \"GB\", \"TN\", \"SA\", \"IT\"];\n  const countries = [\"Globally\", \"in Egypt\", \"in UnitedStates\", \"in France\", \"in Morroco\", \"in Spain\", \"in Emirates\", \"in Britain\", \"in Tunisia\", \"in Saudi Arabia\", \"in Italy\"];\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchTop10(CountryCode));\n      setHeading(`Top 10 Tracks ${Country}`);\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      setTracksList(await fetchSpecificTrack(props.searchTerm));\n      setHeading(\"Search Results\");\n    };\n\n    const clearSearch = () => {\n      props.clearSearchTerm(true);\n    };\n\n    if (props.searchTerm !== '') {\n      fetchData();\n      clearSearch();\n    }\n\n    console.log(\"useEffect\", props.searchTerm);\n  }, [props.searchTerm]); //     const submitHandler = async (searchTerm, event) => {\n  //         event.preventDefault()\n  //         const data = await fetchSpecificTrack(searchTerm)\n  //         setTracksList(data)\n  //         setHeading(\"Search Results\")\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    align: \"center\",\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, heading), /*#__PURE__*/React.createElement(\"div\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Choose Country\"), /*#__PURE__*/React.createElement(FormControl, {\n    onSubmit: async () => {\n      await fetchTop10(CountryCode); // setHeading(`Top 10 Tracks ${Country}`)\n\n      console.log(\"New TOP 10\", tracksList);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(NativeSelect, {\n    defaultValue: \"XW\",\n    onChange: event => {\n      setCountryCode(event.target.value);\n      console.log(event.target); // setCountry(countries[i])\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, countriesCode.map((countryCode, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: countryCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 65\n    }\n  }, \" \", countries[i], \" \"))))), tracksList.length !== 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, tracksList.map(track => {\n    return /*#__PURE__*/React.createElement(Track, {\n      track: track.track,\n      key: track.track.track_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 40\n      }\n    });\n  })) : /*#__PURE__*/React.createElement(\"img\", {\n    src: spinnerGIF,\n    alt: \"loading....\",\n    className: styles.spinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }));\n}\n\nexport default TopTracks;","map":{"version":3,"sources":["/Users/amrabuelfadl/Desktop/ReactProjects/lyric-search/src/components/TopTracks/TopTracks.js"],"names":["React","useState","useEffect","spinnerGIF","styles","Track","fetchTop10","fetchSpecificTrack","Search","NativeSelect","FormControl","TopTracks","props","tracksList","setTracksList","heading","setHeading","CountryCode","setCountryCode","Country","setCountry","countriesCode","countries","fetchData","searchTerm","clearSearch","clearSearchTerm","console","log","event","target","value","map","countryCode","i","length","results","track","track_id","spinner"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport spinnerGIF from '../../images/spinner.gif'\nimport styles from './TopTracks.module.css'\nimport Track from '../Track/Track'\nimport {fetchTop10, fetchSpecificTrack} from '../musicxmatchAPI'\nimport Search from '../Search/Search'\nimport {NativeSelect, FormControl} from '@material-ui/core'\n\nfunction TopTracks(props) {\n    const [tracksList, setTracksList] = useState([])\n    const [heading, setHeading] = useState(\"\")\n    const [CountryCode, setCountryCode] = useState(\"eg\")\n    const [Country, setCountry] = useState(\"Globally\")\n\n    const countriesCode = [\"XW\", \"EG\", \"US\", \"FR\", \"MA\", \"ES\", \"AE\", \"GB\", \"TN\", \"SA\", \"IT\"]\n    const countries = [\"Globally\", \"in Egypt\", \"in UnitedStates\", \"in France\", \"in Morroco\", \"in Spain\", \"in Emirates\", \"in Britain\", \"in Tunisia\", \"in Saudi Arabia\", \"in Italy\"]\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchTop10(CountryCode))\n            setHeading(`Top 10 Tracks ${Country}`)\n\n        }\n        fetchData()\n    }, [])\n\n\n    useEffect(()=>{\n        const fetchData = async () => {\n            setTracksList(await fetchSpecificTrack(props.searchTerm))\n            setHeading(\"Search Results\")\n        }\n\n        const clearSearch = () => {\n            props.clearSearchTerm(true)\n        }\n\n        if(props.searchTerm !== ''){\n            fetchData()\n            clearSearch()\n        }\n        console.log(\"useEffect\", props.searchTerm) \n    }, [props.searchTerm])\n\n\n//     const submitHandler = async (searchTerm, event) => {\n//         event.preventDefault()\n//         const data = await fetchSpecificTrack(searchTerm)\n//         setTracksList(data)\n//         setHeading(\"Search Results\")\n//   }\n    return (\n        <div>\n            {/* <Search  submitHandler={submitHandler}/> */}\n            <h3 align='center' className={styles.heading}>{heading}</h3>\n            <div align='center'> \n                <h4>Choose Country</h4>\n                <FormControl onSubmit={ async ()=> {\n                    await fetchTop10(CountryCode)\n                    // setHeading(`Top 10 Tracks ${Country}`)\n                    console.log(\"New TOP 10\", tracksList)\n                }}>\n                    <NativeSelect  defaultValue = \"XW\" onChange={(event)=>{\n                        setCountryCode(event.target.value)\n                        console.log(event.target)\n                        // setCountry(countries[i])\n                        }}>\n                        {countriesCode.map((countryCode, i) => (<option key={i} value={countryCode}> {countries[i]} </option>))}\n                    </NativeSelect>\n                </FormControl>\n            </div>\n            {\n                tracksList.length !== 0? (\n                    <div className={styles.results}>\n                        \n                        {\n                            tracksList.map((track) => {\n                                return <Track track={track.track} key={track.track.track_id}/>\n                            })  \n                        }\n\n                    </div>\n                )\n                :  (<img src={spinnerGIF} alt= 'loading....' className={styles.spinner}></img>)\n                \n            }\n        </div>\n    )\n}\n\nexport default TopTracks\n"]},"metadata":{},"sourceType":"module"}